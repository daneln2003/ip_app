name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  APP_NAME: ip-app
  CLUSTER_NAME: danel-dev-cluster
  AWS_REGION: eu-north-1
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt
          pip install pytest

      - name: Run tests
        run: |
          export PYTHONPATH=$(pwd)
          pytest app/tests

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image_tag: ${{ steps.timestamp.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate timestamp tag
        id: timestamp
        run: echo "tag=$(date -u +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Export IMAGE_TAG for this job
        run: echo "IMAGE_TAG=${{ steps.timestamp.outputs.tag }}" >> "$GITHUB_ENV"

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Make build script executable
        run: chmod +x build.sh

      - name: Run build script
        run: |
          echo "Building Docker image with tag: $IMAGE_TAG"
          ./build.sh

  deploy:
    name: Deploy on K8S cluster
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubeconfig for EKS
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Run deploy script
        run: |
          echo "Deploying image with tag: $IMAGE_TAG"
          chmod +x deploy.sh
          ./deploy.sh

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    env:
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
    steps:
      - name: Set Slack message
        id: slack_message
        run: |
          status_tests="${{ needs.test.result }}"
          status_build="${{ needs.build.result }}"
          status_deploy="${{ needs.deploy.result }}"
          
          msg=":bell: *CI/CD Report* for \`${{ github.repository }}\` (tag: ${IMAGE_TAG}):\n"
          msg+="• Tests: ${status_tests}\n"
          msg+="• Build: ${status_build}\n"
          msg+="• Deploy: ${status_deploy}\n"
          escaped_msg=$(echo "$msg" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "payload={\"text\":\"${escaped_msg}\"}" >> "$GITHUB_OUTPUT"

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: ${{ steps.slack_message.outputs.payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
